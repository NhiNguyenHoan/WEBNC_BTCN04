{"version":3,"sources":["http-common.js","services/BoardService.js","components/AddBoard.js","components/BoardsList.js","services/CardService.js","components/CardsList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","title","AddBoard","initialBoardState","user_id","description","useState","board","setBoard","submitted","setSubmitted","handleInputChange","event","target","name","value","Form","Button","variant","onClick","Group","as","Row","Label","column","sm","Col","Control","required","onChange","type","BoardDataService","then","response","console","log","catch","e","BoardsList","boards","setBoards","searchTitle","setSearchTitle","useEffect","retrieveBoards","refreshList","md","InputGroup","className","placeholder","Append","CardColumns","map","Card","Img","src","Body","Title","Text","Footer","to","pathname","size","CardsList","match","card_id","board_id","column_index","content","newcard","setNewCard","cards","setCards","boardID","params","retrieveCards","retrieveBoard","removeCard","CardDataService","handleKeyDown","keyCode","saveNewCard","onKeyDown","saveBoardTitle","filter","card","App","Navbar","bg","Brand","href","Nav","Link","Container","exact","path","component","CardList","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.fd406800.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"https://nhihtnguyen-retro-app-backend.herokuapp.com/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});\r\n","import http from \"../http-common\";\r\n\r\nconst getAll = () => {\r\n  return http.get(\"/boards\");\r\n};\r\n\r\nconst get = id => {\r\n  return http.get(`/boards/${id}`);\r\n};\r\n\r\nconst findOne = id => {\r\n  return http.get(`/boards/single/${id}`);\r\n}\r\nconst create = data => {\r\n  return http.post(\"/boards\", data);\r\n};\r\n\r\nconst update = (id, data) => {\r\n  return http.put(`/boards/${id}`, data);\r\n};\r\n\r\nconst remove = id => {\r\n  return http.delete(`/boards/${id}`);\r\n};\r\n\r\nconst removeAll = () => {\r\n  return http.delete(`/boards`);\r\n};\r\n\r\nconst findByTitle = title => {\r\n  return http.get(`/boards?title=${title}`);\r\n};\r\n\r\n\r\n\r\nexport default {\r\n  getAll,\r\n  get,\r\n  findOne,\r\n  create,\r\n  update,\r\n  remove,\r\n  removeAll,\r\n  findByTitle\r\n};\r\n","import React, { useState } from \"react\";\r\nimport BoardDataService from \"../services/BoardService\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nconst AddBoard = () => {\r\n  const initialBoardState = {\r\n    id: null,\r\n    user_id: 1,\r\n    title: \"\",\r\n    description: \"\",\r\n  };\r\n  const [board, setBoard] = useState(initialBoardState);\r\n  const [submitted, setSubmitted] = useState(false);\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setBoard({ ...board, [name]: value });\r\n  };\r\n\r\n  const saveBoard = () => {\r\n    var data = {\r\n      user_id: 1,\r\n      title: board.title,\r\n      description: board.description,\r\n    };\r\n\r\n    BoardDataService.create(data)\r\n      .then((response) => {\r\n        setBoard({\r\n          id: response.data.id,\r\n          user_id: 1,\r\n          title: response.data.title,\r\n          description: response.data.description,\r\n        });\r\n        setSubmitted(true);\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const newBoard = () => {\r\n    setBoard(initialBoardState);\r\n    setSubmitted(false);\r\n  };\r\n\r\n  return (\r\n    <Form>\r\n      {submitted ? (\r\n        <div >\r\n          <h4>You submitted successfully!</h4>\r\n          <Button variant=\"success\" onClick={newBoard}>\r\n            Add\r\n          </Button>\r\n        </div>\r\n      ) : (\r\n        <div >\r\n          <Form.Group as={Row}>\r\n            <Form.Label column sm=\"2\">\r\n              Title\r\n            </Form.Label>\r\n            <Col sm=\"10\">\r\n              <Form.Control\r\n                id=\"title\"\r\n                required\r\n                value={board.title}\r\n                onChange={handleInputChange}\r\n                name=\"title\"\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n          <Form.Group as={Row}>\r\n            <Form.Label column sm=\"2\">\r\n              Description\r\n            </Form.Label>\r\n            <Col sm=\"10\">\r\n              <Form.Control\r\n                id=\"description\"\r\n                required\r\n                value={board.description}\r\n                onChange={handleInputChange}\r\n                name=\"description\"\r\n              />\r\n            </Col>\r\n          </Form.Group>\r\n\r\n          <Button variant=\"success\" type=\"submit\" onClick={saveBoard}>\r\n            Submit\r\n          </Button>\r\n        </div>\r\n      )}\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default AddBoard;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport BoardDataService from \"../services/BoardService\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport CardColumns from \"react-bootstrap/CardColumns\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nconst BoardsList = () => {\r\n  const [boards, setBoards] = useState([]);\r\n  const [searchTitle, setSearchTitle] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    retrieveBoards();\r\n  }, []);\r\n\r\n  const onChangeSearchTitle = (e) => {\r\n    const searchTitle = e.target.value;\r\n    setSearchTitle(searchTitle);\r\n  };\r\n\r\n  const retrieveBoards = () => {\r\n    BoardDataService.getAll()\r\n      .then((response) => {\r\n        setBoards(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const refreshList = () => {\r\n    retrieveBoards();\r\n\r\n  };\r\n\r\n  const removeBoard = (id) => {\r\n    BoardDataService.remove(id)\r\n    .then((response) => {\r\n      console.log(response.data);\r\n      refreshList();\r\n    })\r\n    .catch((e) => {\r\n      console.log(e);\r\n    })\r\n  }\r\n\r\n  const removeAllBoards = () => {\r\n    BoardDataService.removeAll()\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        refreshList();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const findByTitle = () => {\r\n    BoardDataService.findByTitle(searchTitle)\r\n      .then((response) => {\r\n        setBoards(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Row>\r\n      <Col md={8} >\r\n        <InputGroup className=\"mb-3\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"form-control\"\r\n            placeholder=\"Search by title\"\r\n            value={searchTitle}\r\n            onChange={onChangeSearchTitle}\r\n          />\r\n          <InputGroup.Append>\r\n            <Button variant=\"dark\" onClick={findByTitle}>Search</Button>\r\n          </InputGroup.Append>\r\n        </InputGroup>\r\n      </Col>\r\n      <Col md={8}>\r\n        <h4>My Boards</h4>\r\n\r\n        <CardColumns>\r\n          {boards &&\r\n            boards.map((board) => (\r\n              <Card>\r\n                <Card.Img variant=\"top\" src=\"../images/1.jpg\" />\r\n                <Card.Body>\r\n                  <Card.Title>{board.title}</Card.Title>\r\n                  <Card.Text>{board.description}</Card.Text>\r\n                </Card.Body>\r\n                <Card.Footer>\r\n                  <Link to={{pathname: `/boards/${board.id}`}}>\r\n                    <Button variant=\"dark\" >View</Button>\r\n                  </Link>\r\n                  <Button className=\"ml-2\" variant=\"danger\" onClick={()=>{removeBoard(board.id)}}> Delete </Button>\r\n                </Card.Footer>\r\n              </Card>\r\n            ))}\r\n        </CardColumns>\r\n\r\n        <Button  size=\"sm\" onClick={removeAllBoards}>\r\n          Remove All\r\n        </Button>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nexport default BoardsList;\r\n","import http from \"../http-common\";\r\n\r\n\r\nconst create = data => {\r\n  return http.post(\"/cards\", data);\r\n};\r\n\r\nconst remove = id => {\r\n  return http.delete(`/cards/${id}`);\r\n};\r\n\r\nexport default {  \r\n  create,\r\n  remove,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport BoardDataService from \"../services/BoardService\";\r\nimport CardDataService from \"../services/CardService\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport CardColumns from \"react-bootstrap/CardColumns\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\r\n\r\nconst CardsList = ({ match }) => {\r\n  const initialNewCardState = {\r\n    card_id: null,\r\n    board_id: null,\r\n    column_index: \"\",\r\n    content: \"\",\r\n  };\r\n  const initBoard ={\r\n    id:null,\r\n    title: \"\",\r\n    description: \"\",\r\n  }\r\n  const [newcard, setNewCard] = useState(initialNewCardState);\r\n  const [cards, setCards] = useState([]);\r\n  const [board, setBoard] = useState(initBoard);\r\n  const boardID = match.params.id;\r\n\r\n  useEffect(() => {\r\n    retrieveCards(boardID);\r\n    retrieveBoard(boardID);\r\n  }, []);\r\n\r\n\r\n\r\n  const refreshList = () => {\r\n    retrieveCards(boardID);\r\n\r\n  };\r\n  const retrieveCards = (id) => {\r\n    BoardDataService.get(id)\r\n      .then((response) => {\r\n        setCards(response.data);\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const retrieveBoard = (id) => {\r\n    BoardDataService.findOne(id)\r\n    .then((response) => {\r\n      setBoard(response.data);\r\n      console.log(response.data);\r\n    })\r\n    .catch((e) => {\r\n      console.log(e);\r\n    });\r\n  }\r\n  \r\n  const removeCard = (id) => {\r\n    CardDataService.remove(id)\r\n    .then((response) => {\r\n      console.log(response.data);\r\n      refreshList();\r\n    })\r\n    .catch((e) => {\r\n      console.log(e);\r\n    })\r\n  }\r\n\r\n  const saveBoardTitle = () => {\r\n\r\n    console.log(\"save board\");\r\n    var data = {\r\n      id: board.id,\r\n      title: board.title,\r\n      description: board.description\r\n    };\r\n\r\n    BoardDataService.update(boardID,data)\r\n      .then((response) => {\r\n        setBoard({\r\n          id: response.data.id,\r\n          title: response.data.title,\r\n          description: response.data.description,\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n\r\n  const saveNewCard = (column_index) => {\r\n    console.log(\"save a card\");\r\n    var data = {\r\n      board_id: boardID,\r\n      column_index: column_index,\r\n      content: newcard.content,\r\n    };\r\n\r\n    CardDataService.create(data)\r\n      .then((response) => {\r\n        setNewCard({\r\n          card_id: response.data.card_id,\r\n          board_id: response.data.board_id,\r\n          column_index: response.data.column_index,\r\n          content: response.data.content,\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n\r\n\r\n  const handleKeyDown = (e) => {\r\n  if (e.keyCode === 13) {\r\n   saveNewCard(1);\r\n  }\r\n};\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    console.log(\"event target\"+ event.target);\r\n    setNewCard({ ...newcard, [name]: value });\r\n  };\r\n\r\n  const handleChangeBoardTitle = (event) => {\r\n    const { name, value } = event.target;\r\n    console.log(\"event target\"+ event.target);\r\n    setBoard({ ...board, [name]: value });\r\n  };\r\n\r\n  const handleSaveBoardTitle = (e) => {\r\n    if (e.keyCode === 13) {\r\n      saveBoardTitle();\r\n     }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n    <Form className =\"mb-5\" >\r\n    <Form.Control\r\n    id=\"title\"\r\n    required\r\n    value={board.title}\r\n    onChange={handleChangeBoardTitle}\r\n    onKeyDown={handleSaveBoardTitle}\r\n    name=\"title\"\r\n  />\r\n    </Form>\r\n    <Row>\r\n      <Col>\r\n        <h4>Went Well</h4>\r\n        <Form className =\"mb-5\">\r\n          <Form.Control\r\n            id=\"content\"\r\n            required\r\n            value={newcard.content}\r\n            onChange={handleInputChange}\r\n            onKeyDown={handleKeyDown}\r\n            name=\"content\"\r\n            placeholder =\"Add new went well item +\"\r\n          />\r\n        </Form>\r\n        {cards &&\r\n          cards\r\n            .filter((card) => card.column_index === 1)\r\n            .map((card) => (\r\n              <Card>\r\n                <Card.Body>\r\n                  <Card.Text>{card.content}</Card.Text>\r\n                  <Button  variant=\"danger\" onClick={()=>{removeCard(card.card_id)}}> Delete </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            ))}\r\n      </Col>\r\n      <Col>\r\n        <h4>To Improve</h4>\r\n        <Form className =\"mb-5\">\r\n        <Form.Control\r\n          id=\"content\"\r\n          required\r\n          value={newcard.content}\r\n          onChange={handleInputChange}\r\n          onKeyDown={handleKeyDown}\r\n          name=\"content\"\r\n          placeholder=\"Add new improve item +\"\r\n        />\r\n      </Form>\r\n        {cards &&\r\n          cards\r\n            .filter((card) => card.column_index === 2)\r\n            .map((card) => (\r\n              <Card>\r\n                <Card.Body>\r\n                  <Card.Text>{card.content}</Card.Text>\r\n                  <Button  variant=\"danger\" onClick={()=>{removeCard(card.card_id)}}> Delete </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            ))}\r\n      </Col>\r\n      <Col>\r\n        <h4>Action</h4>\r\n        <Form className =\"mb-5\">\r\n        <Form.Control\r\n          id=\"content\"\r\n          required\r\n          value={newcard.content}\r\n          onChange={handleInputChange}\r\n          onKeyDown={handleKeyDown}\r\n          name=\"content\"\r\n          placeholder =\"Add new action item +\"\r\n        />\r\n      </Form>\r\n        {cards &&\r\n          cards\r\n            .filter((card) => card.column_index === 3)\r\n            .map((card) => (\r\n              <Card>\r\n                <Card.Body>\r\n                  <Card.Text>{card.content}</Card.Text>\r\n                  <Button  variant=\"danger\" onClick={()=>{removeCard(card.card_id)}}> Delete </Button>\r\n                </Card.Body>\r\n              </Card>\r\n            ))}\r\n      </Col>\r\n    </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardsList;\r\n","import React from \"react\";\r\nimport { Switch, Route } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nimport AddBoard from \"./components/AddBoard\";\r\nimport Board from \"./components/Board\";\r\nimport BoardsList from \"./components/BoardsList\";\r\nimport CardList from \"./components/CardsList\";\r\n\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Container from \"react-bootstrap/Container\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n    <Navbar.Brand href=\"/\">Retro</Navbar.Brand>\r\n    <Nav className=\"mr-auto\">\r\n      <Nav.Link href=\"/boards\">Boards List</Nav.Link>\r\n      <Nav.Link href=\"/add\">Add New Board</Nav.Link>\r\n    </Nav>\r\n  </Navbar>\r\n      \r\n      <Container className=\"mt-5\">\r\n        <Switch>\r\n          <Route exact path={[\"/\", \"/boards\"]} component={BoardsList} />\r\n          <Route exact path=\"/add\" component={AddBoard} />\r\n          <Route path=\"/boards/:id\" component={CardList} />\r\n        </Switch>\r\n      </Container>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}