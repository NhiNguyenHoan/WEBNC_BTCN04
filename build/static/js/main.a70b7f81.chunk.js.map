{"version":3,"sources":["http-common.js","services/BoardService.js","components/AddBoard.js","components/Board.js","components/BoardsList.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","data","post","delete","title","AddBoard","initialBoardState","id","user_id","description","useState","board","setBoard","submitted","setSubmitted","handleInputChange","event","target","name","value","Form","Button","variant","onClick","Group","as","Row","Label","column","sm","Col","Control","required","onChange","type","BoardDataService","then","response","console","log","catch","e","Board","props","BoardsList","boards","setBoards","searchTitle","setSearchTitle","useEffect","retrieveBoards","md","InputGroup","className","placeholder","Append","CardColumns","map","index","Card","Img","src","Body","Title","Text","Footer","to","pathname","size","App","Navbar","bg","Brand","href","Nav","Link","Container","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a70b7f81.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: \"https://btcn04-1712637.herokuapp.com/api\",\n  headers: {\n    \"Content-type\": \"application/json\"\n  }\n});\n","import http from \"../http-common\";\n\nconst getAll = () => {\n  return http.get(\"/boards\");\n};\n\nconst get = id => {\n  return http.get(`/boards/${id}`);\n};\n\nconst create = data => {\n  return http.post(\"/boards\", data);\n};\n\nconst update = (id, data) => {\n  return http.put(`/boards/${id}`, data);\n};\n\nconst remove = id => {\n  return http.delete(`/boards/${id}`);\n};\n\nconst removeAll = () => {\n  return http.delete(`/boards`);\n};\n\nconst findByTitle = title => {\n  return http.get(`/boards?title=${title}`);\n};\n\nexport default {\n  getAll,\n  get,\n  create,\n  update,\n  remove,\n  removeAll,\n  findByTitle\n};\n","import React, { useState } from \"react\";\nimport BoardDataService from \"../services/BoardService\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nconst AddBoard = () => {\n  const initialBoardState = {\n    id: null,\n    user_id: 1,\n    title: \"\",\n    description: \"\",\n  };\n  const [board, setBoard] = useState(initialBoardState);\n  const [submitted, setSubmitted] = useState(false);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setBoard({ ...board, [name]: value });\n  };\n\n  const saveBoard = () => {\n    var data = {\n      user_id: 1,\n      title: board.title,\n      description: board.description,\n    };\n\n    BoardDataService.create(data)\n      .then((response) => {\n        setBoard({\n          id: response.data.id,\n          user_id: 1,\n          title: response.data.title,\n          description: response.data.description,\n        });\n        setSubmitted(true);\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const newBoard = () => {\n    setBoard(initialBoardState);\n    setSubmitted(false);\n  };\n\n  return (\n    <Form>\n      {submitted ? (\n        <div >\n          <h4>You submitted successfully!</h4>\n          <Button variant=\"success\" onClick={newBoard}>\n            Add\n          </Button>\n        </div>\n      ) : (\n        <div >\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"2\">\n              Title\n            </Form.Label>\n            <Col sm=\"10\">\n              <Form.Control\n                id=\"title\"\n                required\n                value={board.title}\n                onChange={handleInputChange}\n                name=\"title\"\n              />\n            </Col>\n          </Form.Group>\n          <Form.Group as={Row}>\n            <Form.Label column sm=\"2\">\n              Description\n            </Form.Label>\n            <Col sm=\"10\">\n              <Form.Control\n                id=\"description\"\n                required\n                value={board.description}\n                onChange={handleInputChange}\n                name=\"description\"\n              />\n            </Col>\n          </Form.Group>\n\n          <Button variant=\"success\" type=\"submit\" onClick={saveBoard}>\n            Submit\n          </Button>\n        </div>\n      )}\n    </Form>\n  );\n};\n\nexport default AddBoard;\n","import React from \"react\";\n\n\nconst Board = props => {\n  return (\n    <div>\n <h1>Detail Page</h1>\n    </div>\n  );\n};\n\nexport default Board;\n","import React, { useState, useEffect } from \"react\";\nimport BoardDataService from \"../services/BoardService\";\nimport { Link } from \"react-router-dom\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport CardColumns from \"react-bootstrap/CardColumns\";\nimport Button from \"react-bootstrap/Button\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nconst BoardsList = () => {\n  const [boards, setBoards] = useState([]);\n  const [searchTitle, setSearchTitle] = useState(\"\");\n\n  useEffect(() => {\n    retrieveBoards();\n  }, []);\n\n  const onChangeSearchTitle = (e) => {\n    const searchTitle = e.target.value;\n    setSearchTitle(searchTitle);\n  };\n\n  const retrieveBoards = () => {\n    BoardDataService.getAll()\n      .then((response) => {\n        setBoards(response.data);\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const refreshList = () => {\n    retrieveBoards();\n\n  };\n\n\n  const removeAllBoards = () => {\n    BoardDataService.removeAll()\n      .then((response) => {\n        console.log(response.data);\n        refreshList();\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  const findByTitle = () => {\n    BoardDataService.findByTitle(searchTitle)\n      .then((response) => {\n        setBoards(response.data);\n        console.log(response.data);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  };\n\n  return (\n    <Row>\n      <Col md={8} >\n        <InputGroup className=\"mb-3\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            placeholder=\"Search by title\"\n            value={searchTitle}\n            onChange={onChangeSearchTitle}\n          />\n          <InputGroup.Append>\n            <Button variant=\"dark\" onClick={findByTitle}>Search</Button>\n          </InputGroup.Append>\n        </InputGroup>\n      </Col>\n      <Col md={8}>\n        <h4>My Boards</h4>\n\n        <CardColumns>\n          {boards &&\n            boards.map((board, index) => (\n              <Card>\n                <Card.Img variant=\"top\" src=\"../images/1.jpg\" />\n                <Card.Body>\n                  <Card.Title>{board.title}</Card.Title>\n                  <Card.Text>{board.description}</Card.Text>\n                </Card.Body>\n                <Card.Footer>\n                  <Link to={{pathname: `/boards/${index}`}}>\n                    <Button variant=\"dark\" >View</Button>\n                  </Link>\n                </Card.Footer>\n              </Card>\n            ))}\n        </CardColumns>\n\n        <Button variant=\"danger\" size=\"sm\" onClick={removeAllBoards}>\n          Remove All\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n\nexport default BoardsList;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nimport AddBoard from \"./components/AddBoard\";\nimport Board from \"./components/Board\";\nimport BoardsList from \"./components/BoardsList\";\n\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport Container from \"react-bootstrap/Container\";\n\nfunction App() {\n  return (\n    <div>\n    <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"/\">Retro</Navbar.Brand>\n    <Nav className=\"mr-auto\">\n      <Nav.Link href=\"/boards\">Boards List</Nav.Link>\n      <Nav.Link href=\"/add\">Add New Board</Nav.Link>\n    </Nav>\n  </Navbar>\n      \n      <Container className=\"mt-5\">\n        <Switch>\n          <Route exact path={[\"/\", \"/boards\"]} component={BoardsList} />\n          <Route exact path=\"/add\" component={AddBoard} />\n          <Route path=\"/boards/:id\" component={Board} />\n        </Switch>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}